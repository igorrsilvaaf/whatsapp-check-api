const express = require('express');const makeWASocket = require('@whiskeysockets/baileys').default;const { useMultiFileAuthState } = require('@whiskeysockets/baileys');const dotenv = require('dotenv');dotenv.config();const app = express();const PORT = process.env.PORT || 3000;app.use(express.json());let sock;// Inicializar WhatsApp Socketasync function initializeWhatsApp() {  const { state, saveCreds } = await useMultiFileAuthState('session');  sock = makeWASocket({ auth: state });  sock.ev.on('connection.update', (update) => {    const { connection, lastDisconnect } = update;    if (connection === 'close') {      console.error('ConexÃ£o encerrada:', lastDisconnect?.error);      setTimeout(initializeWhatsApp, 10000);    } else if (connection === 'open') {      console.log('âœ… ConexÃ£o com WhatsApp estabelecida!');    }  });  sock.ev.on('creds.update', saveCreds);}// Rota para verificar nÃºmero no WhatsAppapp.post('/check-whatsapp', async (req, res) => {  const { phoneNumber } = req.body;  if (!phoneNumber) {    return res.status(400).json({ error: 'NÃºmero de telefone Ã© obrigatÃ³rio.' });  }  try {    const [result] = await sock.onWhatsApp(phoneNumber);    if (result && result.exists) {      res.json({        phoneNumber,        existsOnWhatsApp: true,        waId: result.jid,      });    } else {      res.json({        phoneNumber,        existsOnWhatsApp: false,      });    }  } catch (error) {    console.error('Erro ao verificar nÃºmero:', error);    res.status(500).json({ error: 'Erro ao verificar nÃºmero no WhatsApp.' });  }});// Iniciar servidorapp.listen(PORT, async () => {  console.log(`ðŸš€ Servidor rodando na porta ${PORT}`);  await initializeWhatsApp();});